@page "/linesettings"

@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Linq
@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json
@using Serilog

@inject IJSRuntime JsRuntime
@inject NavigationManager _navigationManager

<PageTitle>Настройки линии</PageTitle>

@if (allProductLines == null)
{
    <div class='spinner'>
        <div class='dot'></div>
        <div class='dot'></div>
        <div class='dot'></div>
    </div>
    <svg>
        <defs>
            <filter id='goo'>
                <feGaussianBlur in='SourceGraphic' stdDeviation='8' result='blur' />
                <feColorMatrix in='blur' mode='matrix' values='
                1 0 0 0 0
                0 1 0 0 0
                0 0 1 0 0
                0 0 0 50 -8' result='goo' />
                <feBlend in='SourceGraphic' in2='goo' />
            </filter>
        </defs>
    </svg>
}
else
{
    @if (!PermissionLevelPerem)
    {
        <h3>Нет прав для просмотра раздела, обратитесь к администратору!</h3>
    }
    else
    {
        <EditForm Model="allProductLines">
            <InputSelect class="SelectElementStyle" Value="@selectedItem" ValueExpression="@(()=>selectedItem)" ValueChanged="@((string ProductStr) => Update(allProductLines.SingleOrDefault(c=>c.LineName==ProductStr)))">
                
                @if (selectedProductLine == null)
                    {
                        <option value"">Выберите Линию...</option>
                    }
                @foreach (var ProductStr in allProductLines)
                    {
                        <option value="@ProductStr.LineName">@ProductStr.LineName</option>
                    }
            </InputSelect>@*Качественный InputSelect*@
        </EditForm>
        <p></p>
        <div>
            @if (PermissionLevelPerem)
            {
                <div class="divInline">
                    <div> <button @onclick="Create">Создать программу</button> </div>
                           
                            @if (selectedProductLine != null)
                                {
                                     <div> <button class="red_color_btn" @onclick="@(e => Delete(selectedProductLine.LineId.ToString(), selectedProductLine.LineName))">Удалить программу</button> </div>
                                }
                            @if (NewProductLine != null)
                            {
                                  <div><button @onclick="@(e=>SaveResult(NewProductLine))">Сохранить изменения</button> </div>
                            }
                </div>
                <div/>//пустое пространство
            }
            @if (NewProductLine != null)
            {
                <div class="divElementStyle">
                    <div>
                        <div>Имя производственного процесса: </div>
                        <input class="InputMiddleElementStyle" @bind="NewProductLine.LineName" />
                        <p></p>
                        <div >Наличие КТ-0: </div>
                        <div class="box">
                            <input id="one" type="checkbox" @bind="NewProductLine.LineZeroCheckPoint">
                            <span class="check"></span>
                            <label for="one">Статус</label>
                        </div>
                        <div >Список КТ в формате JSON: </div>
                        <textarea style="width:100%" @bind="NewProductLine.LineCheckPointsJson" />
                        <p></p>

                        <EditForm Model="allProducts">
                            <InputSelect class="SelectElementStyle" Value="selectedProductName" ValueExpression="@(()=>selectedProductName)" ValueChanged="@((string ProductStr) => SelectProduct(NewProductLine , allProducts.SingleOrDefault(c=>c.ProductName == ProductStr)))">
                                @foreach (var data in allProducts)
                                    {
                                        <option value="@data.ProductName">@data.ProductName</option>
                                    }
                            </InputSelect>@*Качественный InputSelect*@
                        </EditForm>

                        <p></p>
                    </div>
                    <div>
                        @if (selectedProductLine != null)
                        {
                            <div >Список контрольных точек производственного процесса: </div>
                            <p></p>
                            <div id="sub_line_grid">
                                <div>
                                    <EditForm Model="allCheckPoints">
                                        <InputSelect class="SelectElementStyle" ValueExpression="@(()=>selectedItem)" ValueChanged="@((string CheckpointName) => SelectCheckPoint(allCheckPoints.SingleOrDefault(c => c.CheckPointName==CheckpointName)))">
                                            @foreach (var checkpoint in allCheckPoints)
                                            {
                                <option value="@checkpoint.CheckPointName">@checkpoint.CheckPointName</option>
                                            }
                                        </InputSelect>@*Качественный InputSelect*@
                                    </EditForm>
                                </div>
                                <div>
                                    <button @onclick="CreateNewLineCheckPoint">Добавить проверку КТ</button>
                                </div>
                            </div>
                            @if (LineCheckPoints != null)
                            {
                                <p></p>
                                <table class="tableClass" style="max-height:250px">
                                    <thead>
                                        <tr>
                                            <th>Название контрольной точки</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (var checkpoint in LineCheckPoints)
                                        {
                                            <tr>
                                                <td>@checkpoint.Value</td>
                                                <button class="red_color_btn" @onclick="@(e => DeleteCheckPoint(checkpoint.Key))">Удалить</button>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        }
                    </div>
                </div>

            }
        </div>
    }
}
              

@code {
    static bool PermissionLevelPerem = false;

    string UserName = "";

    protected override async Task OnInitializedAsync() => await Task.Run(Load);

    string selectedItem = "Выберите Линию...";

    string selectedProductName = "";

    static string productionProcessName = "";

    private async void Load()
    {
        Task<AuthenticationState> authState = AuthenticationStateProvider.GetAuthenticationStateAsync();
        try
        {
            //Получаем данные с таблиц Списка работников, Cтраниц и правил
            PermissionLevelPerem = Authorization.Authorization.AuthorizationCheck(authState.Result.User.Identity.Name.Replace(@"\", @"%5C"), "Настройки линии");
            UserName = authState.Result.User.Identity.Name.Replace(@"\", @"%5C");
            GettingLineSettingsDataFromApi();

        }
        catch (Exception ex)
        {
            string exe = ex.Message.ToString();
        }

        //SelectItem = db.SettingSenderManMails.Include(c => c.ClientMails).Include(u => u.CopyMails).Include(r => r.ProductIds).ToList();
    }

    private void GettingLineSettingsDataFromApi()
    {
        Parallel.Invoke(
            () =>
            {
                using (var client = new System.Net.WebClient())
                {
                    allProductLines = JsonConvert.DeserializeObject<List<DataContext.Productionlines.LineSettings>>(client.DownloadString($"http://192.168.96.139:5139/api/ProductionLines/GetAllFrom_LineSettings"));//Посылаем запрос на получение строки
                }
            },

            () =>
            {
                using (var client = new System.Net.WebClient())
                {
                    allProducts = JsonConvert.DeserializeObject<List<DataContext.Products.ProductSettings>>(client.DownloadString($"http://192.168.96.139:5139/api/Products/GetAllFrom_ProductSettings"));//Посылаем запрос на получение строки
                }
            },

            () =>
            {
                using (var client = new System.Net.WebClient())
                {
                    allCheckPoints = JsonConvert.DeserializeObject<List<DataContext.Checkpoints.CheckPointsList>>(client.DownloadString($"http://192.168.96.139:5139/api/CheckPoints/GetAllFrom_CheckPointsList"));//Посылаем запрос на получение строки
                }
            });
    }


    private ICollection<DataContext.Products.ProductSettings> allProducts{ get; set; }
    private DataContext.Products.ProductSettings selectedProduct { get; set; }

    private ICollection<DataContext.Productionlines.LineSettings> allProductLines{ get; set; }
    private DataContext.Productionlines.LineSettings selectedProductLine { get; set; }
    private DataContext.Productionlines.LineSettings NewProductLine { get; set; }

    private ICollection<DataContext.Checkpoints.CheckPointsList> allCheckPoints{ get; set; }
    private DataContext.Checkpoints.CheckPointsList selectedCheckPoint{ get; set; }

    private Dictionary<int,string> LineCheckPoints{ get; set; }

    public int elementId { get; set; } = 0;
    public List<int> tupleElements;
    public int counter { get; set; } = 0;

    private bool Adding { get; set; } = false;


    /// <summary>
    /// Индексация html элементов
    /// </summary>
    /// <param name="start"></param>
    /// <param name="repeat"></param>
    /// <returns></returns>
    public int GetId(bool start, bool repeat)
    {
        elementId++;
        if (start)
        {
            tupleElements = new List<int>();
        }
        if(tupleElements != null & !repeat)
        {
            if (!start)
            {
                tupleElements.Add(elementId);
            }
        }
        if (repeat)
        {
            if(tupleElements.Count > 0)
            {
                elementId = tupleElements.First();
                tupleElements.RemoveAt(0);   
            }
            else
            {
                tupleElements = null;
            }

        }

        return elementId;
    }

    /// <summary>
    /// Проверка уровня доступа
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>


    private void SelectProduct(DataContext.Productionlines.LineSettings line, DataContext.Products.ProductSettings izdel)
    {
        selectedProduct = izdel;
        selectedProductName = selectedProduct.ProductName;
        line.LineProductId = selectedProduct.ProductId;
    }

    private void SelectCheckPoint(DataContext.Checkpoints.CheckPointsList checkpoint)
    {
        selectedCheckPoint = checkpoint;
    }

    /// <summary>
    /// Добавить новое изделие
    /// </summary>
    private void Create()
    {
        DisposeForm();
        NewProductLine = new();
        Adding = true;
    }

    /// <summary>
    /// Удалить существующее изделие
    /// </summary>
    private async void Delete(string LineId, string LineName)
    {
        try
        {
            //TODO: Проверить
            if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить КТ: \"" + selectedProductLine.LineName + "\" ?"))
            {
                using (HttpClient client = new HttpClient())
                {
                    await client.DeleteAsync($"http://192.168.96.139:5139/api/ProductionLines/DeleteString_LineSettings/{LineId}/{LineName}");
                }
            }
            DisposeForm();
            _navigationManager.NavigateTo("/linesettings", true);
        }
        catch
        {

        }

        //db.Remove(selectedProductLine);
        //db.SaveChanges();


    }

    /// <summary>
    /// Сохранить изменения
    /// </summary>

    private async void SaveResult(DataContext.Productionlines.LineSettings ProductLine)
    {
        //TODO: Проверить
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите сохранить изменения для производственного процесса: \"" + NewProductLine.LineName + "\" ?"))
        {
            //Проверка, если выбранная линия соответствует той что мы меняем то Put else  добавляем новую линию
            if (ProductLine.LineName == selectedProductLine.LineName)
            {
                using (HttpClient client = new HttpClient())
                {
                    string Json = JsonConvert.SerializeObject(ProductLine);
                    HttpContent cont = new StringContent("");
                    await client.PutAsJsonAsync($"http://192.168.96.139:5139/api/ProductionLines/Put_LineSettings/{Json}", cont);
                }
            }
            else
            {
                using (HttpClient client = new HttpClient())
                {
                    string Json = JsonConvert.SerializeObject(ProductLine);
                    HttpContent cont = new StringContent("");
                    await client.PostAsJsonAsync($"http://192.168.96.139:5139/api/ProductionLines/Post_LineSettings/{Json}", cont);
                }
            }



            //if (Adding)
            //{
            //    AddDataBase();
            //}
            //else
            //{
            //    db.Entry(selectedProductLine).State = EntityState.Modified;
            //    db.SaveChanges();
            //}
            _navigationManager.NavigateTo("/linesettings", true);

        }
    }

    /// <summary>
    /// Добавление новой программы в БД
    /// </summary>
    private void AddDataBase()
    {
        //try
        //{
        //    if(!string.IsNullOrEmpty(selectedProductLine.LineName))
        //    {                
        //        db.Add(selectedProductLine);
        //        db.SaveChanges();
        //    } 
        //}
        //catch
        //{

        //}        
    }

    private void CreateNewLineCheckPoint()
    {
        if(selectedCheckPoint==null){ return; }
        if(selectedProductLine.LineCheckPointsJson != null)
        {
            LineCheckPoints = JsonConvert.DeserializeObject<Dictionary<int, string>>(selectedProductLine.LineCheckPointsJson);
        }       
        LineCheckPoints.Add(selectedCheckPoint.CheckPointId, selectedCheckPoint.CheckPointName);
        selectedProductLine.LineCheckPointsJson = JsonConvert.SerializeObject(LineCheckPoints);
    }
    private async void DeleteCheckPoint(int checkpointid)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить проверку КТ ?"))
        {
            LineCheckPoints.Remove(checkpointid);
            selectedProductLine.LineCheckPointsJson = JsonConvert.SerializeObject(LineCheckPoints);
        }
        this.StateHasChanged();
    }

    //Обновление формы при выборе другого изделия
    private async void Update(DataContext.Productionlines.LineSettings line)
    {

        selectedProductLine = line;
        selectedItem=selectedProductLine.LineName;
        NewProductLine = selectedProductLine;       //Это для того чтобы заполнить поля данными из выбранной линии.

        selectedProductName = allProducts.FirstOrDefault(e=>e.ProductId== selectedProductLine.LineProductId).ProductName;

        if(selectedProductLine.LineCheckPointsJson != null)
        {
            try
            {
                LineCheckPoints = JsonConvert.DeserializeObject<Dictionary<int, string>>(selectedProductLine.LineCheckPointsJson);
            }
            catch(Exception e)
            {
                Log.Logger.Error("Ошибка Десериализации selectedProductLine.LineCheckPointsJson " + e.Message.ToString());
            }
        }
        else
        {
            LineCheckPoints = new();
        }
        selectedProduct = null;
        selectedCheckPoint = null;

    }

    private void DisposeForm()
    {
        selectedItem = "Выберите Линию...";
        LineCheckPoints = new();
        NewProductLine = null;
        selectedProductLine = null;
        selectedProduct = null;
        selectedCheckPoint = null;
    }
}
