@page "/extraoptions"

@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Linq
@using Microsoft.EntityFrameworkCore;

<PageTitle>Дополнительно</PageTitle>

@if ((SelectItem == null) || (user == null))
{
 <div class='spinner'>
    <div class='dot'></div>
    <div class='dot'></div>
    <div class='dot'></div>
</div>
<svg>
    <defs>
        <filter id='goo'>
            <feGaussianBlur in='SourceGraphic' stdDeviation='8' result='blur' />
            <feColorMatrix in='blur' mode='matrix' values='
                1 0 0 0 0 
                0 1 0 0 0
                0 0 1 0 0
                0 0 0 50 -8' result='goo' />
            <feBlend in='SourceGraphic' in2='goo' />
        </filter>
    </defs>
</svg>
}
else
{   
    @if(PermissionLevel("User"))
    {
        <h3>Нет прав для просмотра раздела, обратитесь к администратору!</h3>       
    }
    else
    {
        <h3>Раздел в разработке!</h3>
        if (PermissionLevel("Admin"))
        {
            <h3>Расширяемость</h3>
        }
    }
}


@code {
    private BlazorApp1.DataContext.Permissions.UserPermissions user{ get; set; }
    protected override async Task OnInitializedAsync() => await Task.Run(Load);
    private async void Load()
    {
        Task<AuthenticationState> authState = AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = new(authState.Result.User.Identity.Name, "Дополнительно");
        SelectItem = db.SettingSenderManMails.Include(c => c.ClientMails).Include(u => u.CopyMails).Include(r => r.ProductIds).ToList();
    }

    private Database.SettingSenderMan.SettingSenderManContext db = new Database.SettingSenderMan.SettingSenderManContext();
    private ICollection<Database.SettingSenderMan.SettingSenderManMails>? SelectItem { get; set; }//Основная модель для клиента

    /// <summary>
    /// Проверка уровня доступа
    /// </summary>
    /// <param name="level"></param>
    /// <returns></returns>
    private bool PermissionLevel(string level)
    {
        foreach(var rule in user.rulesList)
        {
            if(rule.PermissionLevel == level)
            {
                return true;
            }
        }
        return false;
    }
}
