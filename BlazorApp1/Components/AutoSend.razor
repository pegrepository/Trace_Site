@page "/autosend"

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject IJSRuntime JsRuntime

@using System.Linq

@using Microsoft.EntityFrameworkCore;
@using Newtonsoft.Json

<PageTitle>Автоотправка</PageTitle>

@if (SelectItem == null)
{
    <div class='spinner'>
        <div class='dot'></div>
        <div class='dot'></div>
        <div class='dot'></div>
    </div>
    <svg>
    <defs>
        <filter id='goo'>
            <feGaussianBlur in='SourceGraphic' stdDeviation='8' result='blur' />
            <feColorMatrix in='blur' mode='matrix' values='
                1 0 0 0 0
                0 1 0 0 0
                0 0 1 0 0
                0 0 0 50 -8' result='goo' />
            <feBlend in='SourceGraphic' in2='goo' />
        </filter>
    </defs>
</svg>
}
else
{
    @if (!PermissionLevelPerem)
    {
        <h3>Нет прав для просмотра раздела, обратитесь к администратору!</h3>
    }
    else
    {
        @*<details class="custom-select">*@
        <EditForm Model="SelectItem">
            <InputSelect class="SelectKindOfBeg" ValueExpression="@(()=>selectedValue)" ValueChanged="@((string data)=>Update(SelectItem.SingleOrDefault(c=>c.ProgrammSend==data)))">
                @foreach (var data in SelectItem)
                {
                    <option value="@data.ProgrammSend">@data.ProgrammSend</option>
                }
            </InputSelect>@*Качественный InputSelect*@
        </EditForm>
        <div id="line_grid">
            @if (PermissionLevelPerem)
            {
                <div id="sub_line_grid">
                    <div>
                        <button @onclick="Create">Создать программу</button>
                        <p></p>
                        @if (SelectProgramm != null)
                        {
                            <button class="green_color_btn" @onclick="Send">Отправить вручную</button>
                        }
                    </div>
                    <div>
                        @if (SelectProgramm != null)
                        {
                            <button @onclick="SaveResult">Сохранить изменения</button>
                        }
                        @if (SelectProgramm != null)
                        {
                            <button class="red_color_btn" @onclick="@(e => Delete())">Удалить программу</button>
                        }
                    </div>
                </div>
            }
        </div>

        <p></p>
        @if (SelectProgramm != null)
        {
            <div id="grid" style="border: 1px solid;">

                <div>
                    <div >Имя программы: </div>
                    <input size="100%" @bind="SelectProgramm.ProgrammSend" />
                    <p></p>
                    <div >Номер следующей отправки: </div>
                    <input @bind="SelectProgramm.NumberSend" />
                    <p></p>
                    <div >Последняя дата отправки:</div>
                    @if (SelectProgramm.PreviosSend.Year
                   < 2000) { SelectProgramm.PreviosSend = DateTime.Now; }
                    else
                    {
                        <input type="datetime-local" min="2000-01-01T00:00" @bind="SelectProgramm.PreviosSend" />
                    }
                    <p></p>
                    <div >Тема письма:</div>
                    <div>
                        @foreach (var item in Genres)
                        {
                            <input type="button" @onclick="@(e => AddGenres(item))" value="@item" />
                        }
                    </div>
                    <textarea cols="100" @bind="SelectProgramm.SubjectMail" />
                    <p></p>
                    <div >Текст письма: </div>
                    <div>
                        @foreach (var item in Genres2)
                        {
                            <input type="button" @onclick="@(e => AddGenres2(item))" value="@item" />
                        }
                    </div>
                    <textarea cols="100" @bind="SelectProgramm.BodyMail" />
                    <p></p>
                    <div >Структура вложения письма:</div>
                    <div>
                        @foreach (var item in Genres3)
                        {

                            <input type="button" @onclick="@(e => AddGenres3(item))" value="@item" />
                        }
                    </div>
                    <textarea cols="100" @bind="SelectProgramm.StructMail" />

                </div>

                <div>

                    <details>
                        <summary>Почта клиентов</summary>
                        <button @onclick="CreateClient">Добавить клиента</button>
                        @if (SelectClients != null)
                        {
                            <table class="tableClass">
                                <thead>
                                    <tr>
                                        <th>Email</th>
                                        <th>Имя</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in SelectClients)
                                    {
                                        <tr>
                                            <td><input @bind="data.Mail" /></td>
                                            <td><input @bind="data.Name" /></td>
                                            <button class="red_color_btn" @onclick="@(e => DeleteClient(data))">Удалить</button>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </details>
                    <details>
                        <summary>Почта скрытых копий</summary>
                        <button @onclick="CreateCopy">Добавить в копию писем</button>
                        @if (SelectCopy != null)
                        {
                            <table class="tableClass">
                                <thead>
                                    <tr>
                                        <th>Email</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in SelectCopy)
                                    {
                                        <tr>
                                            <td><input @bind="data.Mail" /></td>
                                            <button class="red_color_btn" @onclick="@(e => DeleteCopy(data))">Удалить</button>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </details>
                    <details>
                        <summary>Список ProductId изделий</summary>
                        <button @onclick="CreateIds">Добавить изделие</button>
                        @if (SelectIds != null)
                        {
                            <table class="tableClass">
                                <thead>
                                    <tr>
                                        <th>ProductId</th>
                                        <th>Клиент</th>
                                        <th>Потребитель</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var data in SelectIds)
                                    {
                                        <tr>
                                            <td><input @bind="data.ProdId" /></td>
                                            <td><input @bind="data.Name" /></td>
                                            <td><input @bind="data.Potrebitel" /></td>
                                            <button class="red_color_btn" @onclick="@(e => DeleteIds(data))">Удалить</button>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </details>

                </div>


            </div>
        }
    }
}

@code {

    //private BlazorApp1.DataContext.Permissions.UserPermissions? user{ get; set; }
    static bool PermissionLevelPerem = false;

    string UserName = "";

    protected override async Task OnInitializedAsync() => await Task.Run(Load);

    private void Load()
    {
        Task<AuthenticationState> authState = AuthenticationStateProvider.GetAuthenticationStateAsync();
        try
        {
            //Получаем данные с таблиц Списка работников, Cтраниц и правил
            PermissionLevelPerem = Authorization.Authorization.AuthorizationCheck(authState.Result.User.Identity.Name.Replace(@"\", @"%5C"), "Настройки линии");
            UserName = authState.Result.User.Identity.Name.Replace(@"\", @"%5C");
            GettingLineSettingsDataFromApi();
        }
        catch (Exception ex)
        {
            string exe = ex.Message.ToString();
        }
    }

    private void GettingLineSettingsDataFromApi()
    {
        Parallel.Invoke(
            () =>
            {
                using (var client = new System.Net.WebClient())
                {
                    SelectItem = JsonConvert.DeserializeObject<List<Database.SettingSenderMan.SettingSenderManMails>>(client.DownloadString($"http://192.168.96.139:5139/api/SettingSenderMan/Get_SettingSenderManMails_includingAllTables"));//Посылаем запрос на получение строки
                }
            },
            () =>
            {
                using (var client = new System.Net.WebClient())
                {
                   // SelectItem = JsonConvert.DeserializeObject<List<Database.SettingSenderMan.SettingSenderManMails>>(client.DownloadString($"http://192.168.96.139:5139/api/SettingSenderMan/Get_SettingSenderManMails_includingAllTables"));//Посылаем запрос на получение строки
                }
            }

            );
    }

    string selectedValue;
    //private Database.SettingSenderMan.SettingSenderManContext db = new Database.SettingSenderMan.SettingSenderManContext();
    private Database.SettingSenderMan.SettingSenderManMails SelectProgramm { get; set; } = null;//Выбранная текущая программа

    private ICollection<Database.SettingSenderMan.SettingSenderManMails>? SelectItem { get; set; }//Основная модель для клиента
    private ICollection<Database.SettingSenderMan.ClientMails>? SelectClients { get; set; } = null;//Коллекция выбранной программы
    private ICollection<Database.SettingSenderMan.CopyMails>? SelectCopy { get; set; } = null;//Коллекция  выбранной программы
    private ICollection<Database.SettingSenderMan.ProductIds>? SelectIds { get; set; } = null;//Коллекция  выбранной программы

    //Редактирование формы
    #region Редактирование формы

    //Шаблон для темы письма
    private List<string> Genres = new List<string>() {
            "[DateTime]", "[NumberSend]"
        };
    private void AddGenres(string data)
    {
        SelectProgramm.SubjectMail += data;
    }
    //Шаблон для текста письма
    private List<string> Genres2 = new List<string>()
            { "[DateTime]" };
    private void AddGenres2(string data)
    {
        SelectProgramm.BodyMail += data;
    }    
    //Шаблон для вложения письма
    private List<string> Genres3 = new List<string>() {
            "[BarCode]", "[ICCID VIM]", "[Client]","[Potrebitel]",
            "[MQTTID]", "[TecRom]", "[Serial]", "[GlonasPassword]", "[Y]",
            "[YY]", "[YYYY]", "[DayOfYear]", "[Month]", "[IMEI]"
        };
    private void AddGenres3(string data)
    {
        SelectProgramm.StructMail += data;
    }

    //Добавить нового клиента
    private void CreateClient()
    {
        SelectClients = SelectClients?.Prepend(new Database.SettingSenderMan.ClientMails()
            {
                Mail = "",
                Name = ""
            }).ToList();
    }

    //Добавить новую скрытую копию
    private void CreateCopy()
    {
        SelectCopy = SelectCopy?.Prepend(new Database.SettingSenderMan.CopyMails()
            {
                Mail = ""
            }).ToList();
    }

    //Добавить изделие
    private void CreateIds()
    {
        SelectIds = SelectIds?.Prepend(new Database.SettingSenderMan.ProductIds()
            {
                Name = "",
                ProdId = 0,
                Potrebitel = ""
            }).ToList();
    }    
    
    //Удаление клиента из коллекции
    private void DeleteClient(Database.SettingSenderMan.ClientMails Mail)
    {
        SelectClients?.Remove(Mail);
    }
    //Удаление скрытой копии из коллекции
    private void DeleteCopy(Database.SettingSenderMan.CopyMails Mail)
    {
        SelectCopy?.Remove(Mail);
    }
    //Удаление изделия из коллекции
    private void DeleteIds(Database.SettingSenderMan.ProductIds data)
    {
        SelectIds?.Remove(data);
    } 

    #endregion

    //Редактирование программы
    #region Редактирование программы

    //Добавить новую программу
    bool Adding = false;
    private void Create()
    {
        DisposeForm();
        SelectProgramm = new Database.SettingSenderMan.SettingSenderManMails()
            {
                ClientMails = new LinkedList<Database.SettingSenderMan.ClientMails>(),
                CopyMails = new LinkedList<Database.SettingSenderMan.CopyMails>(),
                ProductIds = new LinkedList<Database.SettingSenderMan.ProductIds>()
            };
        Update(SelectProgramm);
        Adding = true;
    }
      
    /// <summary>
    /// Добавление новой программы в БД
    /// </summary>
    private void AddDatabase()
    {
        try
        {
            if(!string.IsNullOrEmpty(SelectProgramm.ProgrammSend))
            {     
                //TODO: Добавление
                //db.Add(SelectProgramm);
                //db.SaveChanges();
            } 
        }
        catch(Exception)
        {

        }        
    }

    /// <summary>
    /// Ручная отправка программы
    /// </summary>
    private async void Send()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите отправить данные вручную для программы: \"" + SelectProgramm.ProgrammSend + "\" ?"))
        {
            //Отправить вручную SelectProgramm!
        }
    }   

    //Стандартное обновление
    private void Update(Database.SettingSenderMan.SettingSenderManMails Program)
    {
        SelectProgramm = Program;
        SelectClients = SelectProgramm.ClientMails;
        SelectCopy = SelectProgramm.CopyMails;
        SelectIds = SelectProgramm.ProductIds;
    }   

    //Сохранение изменений на сервере    
    private void SaveResult()
    {
        if (Adding)
        {
            AddDatabase();
        }
        else
        {
            foreach(var data in SelectItem)
            {            
                //TODO: Сохранение изменений
                //db.Entry(data).State = EntityState.Modified;
            }
            //db.SaveChanges();
        }        
        _navigationManager.NavigateTo("/autosend", true);   
    } 

    //Удаление программы из коллекции
    private async void Delete()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить программу: \"" + SelectProgramm.ProgrammSend + "\" ?"))
        {          
            // Удалить SelectProgramm!
           //TODO:Удаление
            //db.Remove(SelectProgramm);
            //db.SaveChanges();
            //SelectItem = SelectItem?.Where(a => a.ProgrammSend != SelectProgramm.ProgrammSend).ToList();
            DisposeForm();
            _navigationManager.NavigateTo("/autosend", true);
        }
    }  

    //Очищаем форму
    private void DisposeForm()
    {
        SelectProgramm = null;
        SelectClients = null;
        SelectCopy = null;
        SelectIds = null;
    }

    #endregion
}

